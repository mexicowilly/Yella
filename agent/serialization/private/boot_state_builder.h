#ifndef BOOT_STATE_BUILDER_H
#define BOOT_STATE_BUILDER_H

/* Generated by flatcc 0.3.4 FlatBuffers schema compiler for C by dvide.com */

#ifndef BOOT_STATE_READER_H
#include "boot_state_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

static const flatbuffers_voffset_t __yella_boot_state_required[] = {0 };
__flatbuffers_build_table(flatbuffers_, yella_boot_state, 2)
#define __yella_boot_state_formal_args , uint32_t v0, flatbuffers_uint8_vec_ref_t v1
#define __yella_boot_state_call_args , v0, v1
static inline yella_boot_state_ref_t yella_boot_state_create(flatbuffers_builder_t *B __yella_boot_state_formal_args);

__flatbuffers_build_scalar_field(0, flatbuffers_, yella_boot_state_boot_count, flatbuffers_uint32, uint32_t, 4, 4, 0)
__flatbuffers_build_vector_field(1, flatbuffers_, yella_boot_state_uuid, flatbuffers_uint8, uint8_t)

static inline yella_boot_state_ref_t yella_boot_state_create(flatbuffers_builder_t *B __yella_boot_state_formal_args)
{
    if (yella_boot_state_start(B)
        || yella_boot_state_boot_count_add(B, v0)
        || yella_boot_state_uuid_add(B, v1)) {
        return 0;
    }
    return yella_boot_state_end(B);
}
__flatbuffers_build_table_prolog(flatbuffers_, yella_boot_state, yella_boot_state_identifier, yella_boot_state_type_identifier)

#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* BOOT_STATE_BUILDER_H */
